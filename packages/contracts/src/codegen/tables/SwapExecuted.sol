// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("SwapExecuted")));
bytes32 constant SwapExecutedTableId = _tableId;

struct SwapExecutedData {
  bytes32 receiver;
  uint256 amountIn;
  uint256 amountOut;
  uint16 item0;
  uint16 item1;
}

library SwapExecuted {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.UINT256;
    _schema[2] = SchemaType.UINT256;
    _schema[3] = SchemaType.UINT16;
    _schema[4] = SchemaType.UINT16;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "receiver";
    _fieldNames[1] = "amountIn";
    _fieldNames[2] = "amountOut";
    _fieldNames[3] = "item0";
    _fieldNames[4] = "item1";
    return ("SwapExecuted", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Emit the ephemeral event using individual values */
  function emitEphemeral(
    bytes32 key,
    bytes32 receiver,
    uint256 amountIn,
    uint256 amountOut,
    uint16 item0,
    uint16 item1
  ) internal {
    bytes memory _data = encode(receiver, amountIn, amountOut, item0, item1);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.emitEphemeralRecord(_tableId, _keyTuple, _data);
  }

  /** Emit the ephemeral event using individual values (using the specified store) */
  function emitEphemeral(
    IStore _store,
    bytes32 key,
    bytes32 receiver,
    uint256 amountIn,
    uint256 amountOut,
    uint16 item0,
    uint16 item1
  ) internal {
    bytes memory _data = encode(receiver, amountIn, amountOut, item0, item1);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.emitEphemeralRecord(_tableId, _keyTuple, _data);
  }

  /** Emit the ephemeral event using the data struct */
  function emitEphemeral(bytes32 key, SwapExecutedData memory _table) internal {
    emitEphemeral(key, _table.receiver, _table.amountIn, _table.amountOut, _table.item0, _table.item1);
  }

  /** Emit the ephemeral event using the data struct (using the specified store) */
  function emitEphemeral(IStore _store, bytes32 key, SwapExecutedData memory _table) internal {
    emitEphemeral(_store, key, _table.receiver, _table.amountIn, _table.amountOut, _table.item0, _table.item1);
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    bytes32 receiver,
    uint256 amountIn,
    uint256 amountOut,
    uint16 item0,
    uint16 item1
  ) internal view returns (bytes memory) {
    return abi.encodePacked(receiver, amountIn, amountOut, item0, item1);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));
  }
}
